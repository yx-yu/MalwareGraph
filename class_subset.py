import os
from random import *
import pandas as pd
import shutil
import random
random.seed(0)  # 确定随机种子
import csv
import os
from PIL import Image
import json
from PIL import ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True
Image.MAX_IMAGE_PIXELS = None

# 图像数据集所在的文件夹路径
dataset_folder = "Hexadecimal code/Priv_img"

# 获取所有图像文件的路径列表
image_files = [os.path.join(dataset_folder, filename) for filename in os.listdir(dataset_folder) if
               os.path.isfile(os.path.join(dataset_folder, filename))]

# # 初始化宽度集合
# widths = set()
# # 遍历图像文件列表，获取所有宽度
# for file_path in image_files:
#     # 打开图像文件
#     image = Image.open(file_path)
#
#     # 获取图像的宽度
#     width = image.width
#
#     # 将宽度添加到集合中
#     widths.add(width)
#
# # 将宽度集合转换为列表，并删除重复元素
# widths_list = list(set(widths))
#
# # 根据宽度创建对应的文件夹
# for width in widths_list:
#     folder_name = str(width)
#     folder_path = os.path.join(dataset_folder, folder_name)
#     os.makedirs(folder_path, exist_ok=True)
#
# print("根据图像宽度创建文件夹完成！")
#
#
# #
# # 初始化class集合
# class_label = set()
# # 创建标签字典
# label_csv_file = "train_label_Priv.csv"
# labels = {}
# invert_labels = {}
# with open(label_csv_file, "r") as label_file:
#     reader = csv.reader(label_file)
#     next(reader)  # 跳过标题行
#     for row in reader:
#         filename, label = row
#         labels[filename] = label
#         if label in invert_labels:
#             invert_labels[label].append(filename)
#         else:
#             invert_labels[label] = [filename]
#
# # 将class集合转换为列表，并删除重复元素
# class_label = list(set(invert_labels))
#
# # 根据class创建对应的文件夹
# for label in class_label:
#     folder_name = str(label)
#     folder_path = os.path.join(dataset_folder, folder_name)
#     os.makedirs(folder_path, exist_ok=True)
# print("根据图像class创建文件夹完成！")
#
#
# # 创建标签字典
label_csv_file = "train_label_Priv.csv"
labels = {}
with open(label_csv_file, "r") as label_file:
    reader = csv.reader(label_file)
    next(reader)  # 跳过标题行
    for row in reader:
        filename, label = row
        labels[filename] = label


# 创建包含图像尺寸和标签的 CSV 文件
# image_dimensions_label = "Priv_image_dimensions_label.csv"
# with open(image_dimensions_label, "w", newline="", encoding='utf-8') as dim_file:
#     writer = csv.writer(dim_file)
#     writer.writerow(["Filename", "Width", "Height", "Label"])
#     # 遍历图像文件，并按照宽度复制样本到对应的文件夹中
#     for file_path in image_files:
#         # 打开图像文件
#         image = Image.open(file_path)
#         # 获取图像的宽度和长度
#         width = image.width
#         height = image.height
#         # 获取文件名
#         filename = os.path.basename(file_path)
#         new_name = filename.replace('.bytes.png', '')
#         # 获取标签
#         label = labels.get(new_name, "")
#         # 写入 CSV 文件
#         writer.writerow([new_name, width, height, label])
#
#         # 构建目标文件夹路径
#         target_folder = os.path.join(dataset_folder, str(label))
#
#         # 构建目标文件路径
#         target_file_path = os.path.join(target_folder, filename)
#
#         # 复制图像文件到目标文件夹
#         shutil.copyfile(file_path, target_file_path)
#
#     print("按照图像label复制样本完成！")

# 创建包含图像尺寸和标签的 CSV 文件
image_dimensions_label = "image_dimensions_label.csv"
with open(image_dimensions_label, "w", newline="", encoding='utf-8') as dim_file:
    writer = csv.writer(dim_file)
    writer.writerow(["Filename", "Width", "Height", "Label"])
    # 遍历图像文件，并按照宽度复制样本到对应的文件夹中
    for file_path in image_files:
        # 打开图像文件
        image = Image.open(file_path)
        # 获取图像的宽度和长度
        width = image.width
        height = image.height

        # 获取文件名
        filename = os.path.basename(file_path)
        new_name = filename.replace('.bytes.png', '')
        # 获取标签
        label = labels.get(new_name, "")
        # 写入 CSV 文件
        writer.writerow([new_name, width, height, label])

        # 构建目标文件夹路径
        target_folder = os.path.join(dataset_folder, str(width))

        # 构建目标文件路径
        target_file_path = os.path.join(target_folder, filename)

        # 复制图像文件到目标文件夹
        shutil.copyfile(file_path, target_file_path)

    print("按照图像宽度复制样本完成！")





#
# trainlabels = pd.read_csv('trainLabels.csv')
# fids = []
# opd = pd.DataFrame()
# for clabel in range(1, 10):
#     mids = trainlabels[trainlabels.Class == clabel]
#     mids = mids.reset_index(drop=True)
#     rchoice = random.sample(range(1, len(mids) - 1), 40)
#     print(rchoice)
#
#     #     for i in rchoice:
#     #         fids.append(mids.loc[i].Id)
#     #         opd = opd.append(mids.loc[i])
#
#     rids = [mids.loc[i].Id for i in rchoice]
#     fids.extend(rids)
#     duplicates = list(set([x for x in fids if fids.count(x) > 1]))
#     print(duplicates)
#     opd = opd.append(mids.loc[rchoice])
#
# print(len(fids))
# opd = opd.reset_index(drop=True)
# print(opd)
# opd.to_csv('subtrainLabels.csv', encoding='utf-8', index=False)
# '''查找list中重复的元素'''
# duplicates = list(set([x for x in fids if fids.count(x) > 1]))
# print(duplicates)
# sbase = 'train/'
# tbase = 'subtrain/'
# a = 0
# for fid in fids:
#     a += 1
#     fnames = ['{0}.asm'.format(fid), '{0}.bytes'.format(fid)]
#     for fname in fnames:
#         cspath = sbase + fname
#         ctpath = tbase + fname
#         shutil.copy(cspath, ctpath)