import os
import json
import pickle
import random
from PIL import Image
import numpy as np
import cv2
import random
import os
import glob
import matplotlib.pyplot as plt
import csv
from sklearn.metrics import confusion_matrix, precision_recall_fscore_support


def calculate_metrics(confusion_matrix):
    cm = confusion_matrix
    # 计算每个类别的指标
    precision = np.zeros(cm.shape[0])
    recall = np.zeros(cm.shape[0])
    f1_score = np.zeros(cm.shape[0])
    false_positive_rate = np.zeros(cm.shape[0])

    for i in range(cm.shape[0]):
        tp = cm[i, i]
        fp = cm[:, i].sum() - tp
        fn = cm[i, :].sum() - tp
        tn = np.sum(cm) - tp - fp - fn

        precision[i] = tp / (tp + fp + 1e-10)
        recall[i] = tp / (tp + fn + 1e-10)
        f1_score[i] = 2 * precision[i] * recall[i] / (precision[i] + recall[i] + 1e-10)
        false_positive_rate[i] = fp / (fp + tn + 1e-10)

    # 计算加权平均的指标
    accuracy = np.sum(np.diag(cm)) / np.sum(cm)
    precision_macro = np.mean(precision)
    recall_macro = np.mean(recall)
    f1_score_macro = np.mean(f1_score)
    false_positive_rate_macro = np.mean(false_positive_rate)

    # 计算准确率

    # # print("Accuracy:", accuracy)
    #
    # # 计算精确率
    # precision = np.diag(cm) / np.sum(cm, axis=0)
    # # print("Precision:", precision)
    #
    # # 计算召回率
    # recall = np.diag(cm) / np.sum(cm, axis=1)
    # # print("Recall:", recall)
    #
    # # 计算F1值
    # f1_score = 2 * precision * recall / (precision + recall)
    # # print("F1 score:", f1_score)
    #
    # # 计算false positive
    # false_positives = np.sum(cm, axis=0) - np.diag(cm)
    # # print("False positives:", false_positives)

    # 返回结果
    return {'accuracy': accuracy,
            'Precision': precision_macro,
            'Recall': recall_macro,
            'f1_score': f1_score_macro,
            'false_positives': false_positive_rate_macro}


def read_data(root: str, width: str =None, val_rate: float = 0.1):
    random.seed(0)  # 保证随机结果可复现
    assert os.path.exists(os.path.join(root, str(width))), "dataset root: {} does not exist.".format(root)
    # 创建标签字典
    # label_csv_file = "image_dimensions_label_BDCI.csv"
    label_csv_file = "Priv_image_dimensions_label.csv"
    labels_class = {}
    with open(label_csv_file, "r") as label_file:
        reader = csv.reader(label_file)
        next(reader)  # 跳过标题行
        for row in reader:
            filename, _, _, label = row
            labels_class[filename] = label
    train_images_path = []  # 存储训练集的所有图片路径
    train_images_label = []  # 存储训练集图片对应索引信息
    val_images_path = []  # 存储验证集的所有图片路径
    val_images_label = []  # 存储验证集图片对应索引信息
    every_class_num = []  # 存储每个类别的样本总数
    supported = [".jpg", ".JPG", ".png", ".PNG"]  # 支持的文件后缀类型
    cla_path = os.path.join(root, str(width))
    # 获取所有图像文件的路径列表
    image_files = [os.path.join(cla_path, filename) for filename in os.listdir(cla_path) if
                   os.path.isfile(os.path.join(cla_path, filename))]
    # 遍历每个文件夹下的文件
    images = []
    image_class = []
    for image in image_files:
        # 遍历获取supported支持的所有文件路径
        images.append(image)
        # 记录该类别的样本数量
    every_class_num.append(len(images))
    # 按比例随机采样验证样本
    val_path = random.sample(images, k=int(len(images) * val_rate))
    # with open('class_indices_BDCI.json', 'r') as f:
    with open('Priv_class_indices.json', 'r') as f:
        class_indices = json.load(f)
    for img_path in images:
        if img_path in val_path:  # 如果该路径在采样的验证集样本中则存入验证集
            val_images_path.append(img_path)
            new_name = img_path.split('\\')[-1].split('.')[0].replace('.bytes', '')
            # 获取标签
            label = labels_class.get(new_name, "")
            label = list(class_indices.keys())[list(class_indices.values()).index(label)]
            val_images_label.append(label)
        else:  # 否则存入训练集
            train_images_path.append(img_path)
            new_name = img_path.split('\\')[-1].split('.')[0].replace('.bytes', '')
            # 获取标签
            label = labels_class.get(new_name, "")
            label = list(class_indices.keys())[list(class_indices.values()).index(label)]
            train_images_label.append(label)

    print("{} images were found in the dataset.".format(sum(every_class_num)))
    print("{} images for training.".format(len(train_images_path)))
    print("{} images for validation.".format(len(val_images_path)))

    return train_images_path, train_images_label, val_images_path, val_images_label


def read_split_data(root: str, val_rate: float = 0.2):
    random.seed(0)  # 保证随机结果可复现
    assert os.path.exists(root), "dataset root: {} does not exist.".format(root)

    # 遍历文件夹，一个文件夹对应一个类别
    PE_class = [cla for cla in os.listdir(root) if os.path.isdir(os.path.join(root, cla))]
    # 排序，保证顺序一致
    PE_class.sort()
    # 生成类别名称以及对应的数字索引
    class_indices = dict((k, v) for v, k in enumerate(PE_class))
    json_str = json.dumps(dict((val, key) for key, val in class_indices.items()), indent=4)
    with open('class_indices.json', 'w') as json_file:
        json_file.write(json_str)

    train_images_path = []  # 存储训练集的所有图片路径
    train_images_label = []  # 存储训练集图片对应索引信息
    val_images_path = []  # 存储验证集的所有图片路径
    val_images_label = []  # 存储验证集图片对应索引信息
    every_class_num = []  # 存储每个类别的样本总数
    supported = [".jpg", ".JPG", ".png", ".PNG"]  # 支持的文件后缀类型
    # 遍历每个文件夹下的文件
    for cla in PE_class:
        cla_path = os.path.join(root, cla)
        # 遍历获取supported支持的所有文件路径
        images = [os.path.join(root, cla, i) for i in os.listdir(cla_path)
                  if os.path.splitext(i)[-1] in supported]
        # 获取该类别对应的索引
        image_class = class_indices[cla]
        # 记录该类别的样本数量
        every_class_num.append(len(images))
        # 按比例随机采样验证样本
        val_path = random.sample(images, k=int(len(images) * val_rate))

        for img_path in images:
            if img_path in val_path:  # 如果该路径在采样的验证集样本中则存入验证集
                val_images_path.append(img_path)
                val_images_label.append(image_class)
            else:  # 否则存入训练集
                train_images_path.append(img_path)
                train_images_label.append(image_class)

    print("{} images were found in the dataset.".format(sum(every_class_num)))
    print("{} images for training.".format(len(train_images_path)))
    print("{} images for validation.".format(len(val_images_path)))

    plot_image = False
    if plot_image:
        # 绘制每种类别个数柱状图
        plt.bar(range(len(PE_class)), every_class_num, align='center')
        # 将横坐标0,1,2,3,4替换为相应的类别名称
        plt.xticks(range(len(PE_class)), PE_class)
        # 在柱状图上添加数值标签
        for i, v in enumerate(every_class_num):
            plt.text(x=i, y=v + 5, s=str(v), ha='center')
        # 设置x坐标
        plt.xlabel('image class')
        # 设置y坐标
        plt.ylabel('number of images')
        # 设置柱状图的标题
        plt.title('flower class distribution')
        plt.show()

    return train_images_path, train_images_label, val_images_path, val_images_label


def plot_data_loader_image(data_loader):
    batch_size = data_loader.batch_size
    plot_num = min(batch_size, 4)

    json_path = './class_indices.json'
    assert os.path.exists(json_path), json_path + " does not exist."
    json_file = open(json_path, 'r')
    class_indices = json.load(json_file)

    for data in data_loader:
        images, labels = data
        for i in range(plot_num):
            # [C, H, W] -> [H, W, C]
            img = images[i].numpy().transpose(1, 2, 0)
            # 反Normalize操作
            img = (img * [0.229, 0.224, 0.225] + [0.485, 0.456, 0.406]) * 255
            label = labels[i].item()
            plt.subplot(1, plot_num, i+1)
            plt.xlabel(class_indices[str(label)])
            plt.xticks([])  # 去掉x轴的刻度
            plt.yticks([])  # 去掉y轴的刻度
            plt.imshow(img.astype('uint8'))
        plt.show()


def write_pickle(list_info: list, file_name: str):
    with open(file_name, 'wb') as f:
        pickle.dump(list_info, f)


def read_pickle(file_name: str) -> list:
    with open(file_name, 'rb') as f:
        info_list = pickle.load(f)
        return info_list


def calculate_means_std(image_path):
    means = [0]
    stdevs = [0]
    # 循环遍历数据集中的每个图像，将其像素值添加到数组中
    for image in image_path:
        # 使用PIL库打开图像并将其转换为灰度图像
        gray_image = cv2.imread(image, cv2.IMREAD_GRAYSCALE)
        gray_image = gray_image.astype(np.float32) / 255.
        means[0] += gray_image[:, :].mean()
        stdevs[0] += gray_image[:, :].std()
    means.reverse()
    stdevs.reverse()

    means = np.asarray(means) / len(image_path)
    stdevs = np.asarray(stdevs) / len(image_path)

    print("normMean = {}".format(means))
    print("normStd = {}".format(stdevs))
    print('transforms.Normalize(normMean = {}, normStd = {})'.format(means, stdevs))

    return means, stdevs
    #     for line in lines:
    #         eles = line.strip().split(' ')
    #         print('{}/{}'.format(index, len(lines)))
    #         index += 1
    #
    #         datas = glob.glob(os.path.join(eles[0], 'diff_nor*.jpg'))
    #         for data in datas:
    #             num_imgs += 1
    #             img = cv2.imread(data)
    #             img = img.astype(np.float32) / 255.
    #             for i in range(3):
    #                 means[i] += img[:, :, i].mean()
    #                 stdevs[i] += img[:, :, i].std()
    #
    # means.reverse()
    # stdevs.reverse()
    #
    # means = np.asarray(means) / num_imgs
    # stdevs = np.asarray(stdevs) / num_imgs
    #
    # print("normMean = {}".format(means))
    # print("normStd = {}".format(stdevs))
    # print('transforms.Normalize(normMean = {}, normStd = {})'.format(means, stdevs))