import random
import hparams as hp
from torch.utils.data.sampler import Sampler


def create_episode(data, num_classes, num_support, num_query):
    episode = []
    label = data.keys()
    label = list(label)
    # label.remove(1)
    # label.remove(2)
    # label.remove(3)
    # label.remove(4)
    # label.remove(5)
    classes = random.sample(label, num_classes)
    for cls in classes:
        samples = random.sample(data[cls], num_support + num_query)
        support_set = samples[:num_support]
        query_set = samples[num_support:]
        episode.append((support_set, query_set))
    return episode,classes


def create_episodes(train_dataset,num_classes,num_support,num_query,num_episodes):
    class_num_classes = hp.num_label_class
    data_dict = {i:[] for i in range(class_num_classes)}
    for idx,sample_data in enumerate(train_dataset):
        data_dict[sample_data[1]-1].append(idx)

    # 创建多个episode
    episodes = []
    for _ in range(num_episodes):
        # print(_)
        # logger.info(_)
        episode,selected_classes = create_episode(data_dict, num_classes, num_support, num_query)
        episodes.append((episode,selected_classes))
    return episodes


def fewshot_train_test_contra_sampler(train_dataset,episode,contr_bz):
    query_list = []
    support_list = []
    support_contra_lists = [[] for _ in range(hp.epochs)]
    for i,single_class in enumerate(episode):
        support_list.extend(single_class[0])
        query_list.extend(single_class[1])
        for sample in single_class[0]:
            for support_contra_list in support_contra_lists:
                support_contra_list.append(sample)
                while True:
                    positive_sampler = random.choice(single_class[0])
                    if positive_sampler != sample:
                        support_contra_list.append(positive_sampler)
                        break
                set_class = set(range(len(episode)))
                set_class.remove(i)
                left_class_list = list(set_class)
                for left_i in range(contr_bz-2):
                    random_class = random.choice(left_class_list)
                    random_indices = episode[random_class][0]
                    random_negtive_sampler = random.choice(random_indices)
                    support_contra_list.append(random_negtive_sampler)
    support_contra_seq_sampler_epochs = []
    for support_contra_list in support_contra_lists:
        support_contra_seq_sampler = ContrastiveSequencesampler(train_dataset,support_contra_list)
        support_contra_seq_sampler_epochs.append(support_contra_seq_sampler)
    support_seq_sampler = ContrastiveSequencesampler(train_dataset,support_list)
    query_seq_sampler = ContrastiveSequencesampler(train_dataset,query_list)

    return support_contra_seq_sampler_epochs,support_seq_sampler,query_seq_sampler

class ContrastiveSequencesampler(Sampler):
    def __init__(self, data_source, indices):
        self.data_source = data_source
        self.indices = indices

    def __iter__(self):
        return iter(self.indices)

    def __len__(self):
        return len(self.indices)

def sampler_dataset(train_dataset,batch_size):
    num_classes = hp.num_label_class
    # Define a list of sample indexes for each category
    class_indices = [[] for _ in range(num_classes)]
    for idx, sample_data in enumerate(train_dataset):
        class_indices[sample_data[1] - 1].append(idx)
        # print('111')

    batch_contra_sampler = []
    for i, indices in enumerate(class_indices):
        # logger.info(f'i:{i}')
        for indice in indices:
            batch_contra_sampler.append(indice)
            while True:
                positive_sampler = random.choice(indices)
                if positive_sampler != indice:
                    batch_contra_sampler.append(positive_sampler)
                    # print('111')
                    break
            set_class = set(range(num_classes))
            set_class.remove(i)
            left_class_list = list(set_class)
            for left_i in range(batch_size - 2):
                random_class = random.choice(left_class_list)
                random_indices = class_indices[random_class]
                random_negtive_sampler = random.choice(random_indices)
                batch_contra_sampler.append(random_negtive_sampler)

    contra_seq_sampler = ContrastiveSequencesampler(train_dataset, batch_contra_sampler)
    return contra_seq_sampler